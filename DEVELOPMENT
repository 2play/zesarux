* Numeros de version

en cpu.h, comentar SNAPSHOT_VERSION, borrar -SN o -RC sufijo de EMULATOR_VERSION,
cambiar fechas en EMULATOR_DATE, EMULATOR_SHORT_DATE
cambiar nombre edicion en EMULATOR_EDITION_NAME 
en Changelog cambiar nombre edicion y fechas
activar capture segmentation fault en cpu.c
activar capture floating point exception en cpu.c
Cambiar EMULATOR_VERSION en archivo configure 
Cambiar version en macos/apptemplate/Contents/Info.plist, tag CFBundleVersion
Ajustar juego editionnamegame.tap, si juego no permitido distribucion, eliminar
En changelog, decir quÃ© comandos nuevos de ZRCP, haciendo diff con version anterior

* desactivar simulador joystick
* vigilar tecla F7 de scrxwindows.c, scrcocoa.m de simulador de joystick que no este asociada al simulador
* Actualizar features, segun lo agregado a Changelog
* vigilar funciones F de pruebas en xwindows, desactivar las que sean de pruebas

nombres ediciones:
toi acid, sabre wulf, turbo esprit, great escape, target renegade, cliff hanger,  Night Shift, Saint Dragon, silent service, bubble bobble, dynamite Dan 2, rygar, frank n stein, match day, Hysteria, Star raiders 2, Bruce lee, El zorro , Exploding fist, Three weeks in Paradise, Exolon, Koronis Rift, Fox Fights back, Gauntlet, world destruction

*rainbow islands, *jetpac, *hard drivin', *lemmings, *sir fred, *rick, *agent dan, *id, *rainbow, *rainbow+, *saint george, *chase hq, *Rescue on Fractalus, *gunfright, *xeno

*: usado

--------------

Establecer username y mail en repo descargado:
git config --global user.name "chernandezba" ; git config --global user.email chernandezba@hotmail.com

--------------


* source a generar

ZEsarUX_src-version.tar.gz

con comandos:
make sourcetargz

#antes de subir los archivos a sourceforge, generar los MD5SUMS de todos


----


* Binarios a generar. Generarlos partiendo del codigo fuente generado antes

Codigos de letras segun modulos habilitados (de momento esto solo es una idea, no se implementa aun):
A-> aalib
C-> curses
D-> dsp
K-> cacalib
L-> alsa
M-> memptr
P-> pulse
S-> stdout
X-> xwindows

De todos los archivos generados y subidos a sourceforge, crear suma MD5SUM en local de cada archivo y luego subirlo en archivo MD5SUM
con todos los archivos subidos comprimidos y README (y excluyendo este mismo MD5SUM)


** Extra files

make extra_files
Y subir el zip a sourceforge


** Linux 
Generar estos dos binarios de Linux:
ZEsarUX_linux-version-debian9_x32.tar.gz 
ZEsarUX_linux-version-debian9_x64.tar.gz 
con comandos:
export CFLAGS=-O2
export LDFLAGS=-O2
./configure --enable-memptr --enable-visualmem --enable-cpustats --disable-caca --disable-aa --prefix /usr
(Habilita drivers video: xwindows, sdl, fbdev, curses, stdout, simpletext y drivers audio: pulse, alsa, sdl, dsp. )
make clean
make
make bintargz

** Raspbian
Generar este binario de Raspbian:
ZEsarUX_rpi-version-raspbian9.tar.gz 
(Habilita extensiones raspberry, drivers video: fbdev, curses, y drivers audio: alsa, sdl, dsp. )
con comandos:
export CFLAGS=-O2
export LDFLAGS=-O2
./configure --enable-raspberry --disable-xwindows --disable-caca --disable-aa --disable-pulse --disable-simpletext --disable-stdout --prefix /usr

La salida debe ser similar a:
 Enabled Video output drivers: curses sdl fbdev null
 Disabled Video output drivers: stdout simpletext aa caca cocoa xwindows 
 Enabled Audio output drivers: dsp alsa sdl null
 Disabled Audio output drivers: pulse coreaudio 
 Enabled Audio File output drivers: raw 
 Disabled Audio File output drivers: wav 
 Pthreads support: yes
 Linux real joystick support: yes
 MEMPTR emulation: no
 Visual memory option: no
 CPU statistics option: no
 Raspberry extensions: yes
 Contended memory emulation: yes
 Putpixel cache: yes

Install prefix: /usr


Luego:

make clean
make
make bintargz
(Con O3, tarda 08:40 en compilar con 800MHz)
(Con O2, tarda 06:30 en compilar con 800MHz)

** Mac
Generar dos binarios de Mac:
ZEsarUX_macos_no_opengl-version.dmg.gz 
con comandos:
export CFLAGS=-O2
export LDFLAGS=-O2
./configure --enable-memptr --enable-visualmem --enable-cpustats --disable-xwindows --disable-sdl --disable-fbdev --disable-caca --disable-aa --disable-curses --disable-sndfile 
(Habilita drivers video: cocoa, stdout, simpletext y drivers audio: coreaudio. )
make clean
make
make macapp

Y

ZEsarUX_macos_opengl-version.dmg.gz
con comandos:
export CFLAGS=-O2
export LDFLAGS=-O2
./configure --enable-memptr --enable-visualmem --enable-cpustats --disable-xwindows --disable-sdl --disable-fbdev --disable-caca --disable-aa --disable-curses --disable-sndfile --enable-cocoa-opengl
(Habilita drivers video: cocoa(GL), stdout, simpletext y drivers audio: coreaudio. )
make clean
make
make macapp



**Windows
Generar este binario de Windows, mingw:
ZEsarUX_win-no-pthreads-version.zip
y
ZEsarUX_win-pthreads-version.zip

Ver documento INSTALLWINDOWS, Native Windows (with mingw)

Generar dos binarios, uno con pthreads y otro sin, con:

./configure --enable-memptr --enable-visualmem --enable-cpustats

y

./configure --enable-memptr --enable-visualmem --enable-cpustats --disable-pthreads

Esto compilara con SDL1

La salida debe ser:
 Enabled Video output drivers: simpletext sdl null
 Disabled Video output drivers: stdout curses aa caca cocoa xwindows fbdev 
 Enabled Audio output drivers: sdl null
 Disabled Audio output drivers: dsp alsa pulse coreaudio 

make clean
make 

copiar SDL.dll aqui:
copy c:\mingw\sdl\bin\SDL.dll .

o SDL2
copy c:\mingw\sdl2\bin\SDL2.dll .

En el caso de la version con pthreads, tambien copiar:
pthreadGC2.dll libgcc_s_dw2-1.dll

y probar a ejecutar:

desde consola:
zesarux.exe

y con doble-click desde explorer

Luego enviar zesarux.exe y SDL.dll a maquina linux/unix y generar el binario con:
-ejecutar misma sentencia configure que en windows y luego

make clean
make windows
El make clean es importante para que borre la carpeta temporal ZEsarUX_win-XX, sino, puede pasar que al hacer primero la version de pthreads,
la siguiente, que no usa threads, tendra dlls adicionales en esa carpeta y se copiarian (cosa que no pasaria nada, pero es innecesario)

Nota: se podria compilar en 64 bits, pero SDL 1.2 solo tiene version 32 bits
Nota: pasar antes antivirus al exe y al dll por si acaso
