ZEsarUX Installation Instructions
---------------------------------

This file explains how to install ZEsarUX on Unix systems: Linux, Mac OS X, Raspberry.

For Windows specific instructions please see the INSTALLWINDOWS file.


# Other versions provided by 3rd parties:

Arch Linux:
https://aur.archlinux.org/packages/zesarux/

Retropie/EmulationStation:
http://emulationstation.org/

Open Pandora:
https://repo.openpandora.org/?page=detail&app=zesarux

PocketCHIP:
https://bbs.nextthing.co/t/tutorial-zesarux-8-bit-computer-emulator/8532

MorhpOS: can be compiled using the provided patch.



Core Requirements
-----------------

- gcc compiler.
- unix compatible operating system.


The following is a list of recommended minimum features for each operating system.


# Linux

- x11
- libpthreads
- alsa
- pulse


# macOS

- gcc, which can be installed with XCode. libpthreads is also included with XCode.
- Video support is provided by Cocoa driver, but you can also try to compile using X11 or another video driver.


# Raspberry Pi

A Raspberry Pi 2 is recommended a minimum. The Raspberry Pi 1 is a bit too slow for ZEsarUX, but you can run at normal Spectrum speed by setting overclock on the Pi and
having Real Video setting disabled.

- libpthreads
- alsa
- SDL
- fbdev

Video support is provided by Framebuffer driver (fbdev), but you can also try to compile using X11, SDL or another video driver.

SDL 1.2 is recommended, to use SDL audio. SDL audio works better than alsa. You can install SDL libraries with:

    $ apt-get install libsdl1.2-dev


NOTE: SDL2 support is experimental.



Options Features
----------------

The following is a list of complete features, all of which are optional.


# Video Drivers

- x11 (on Linux/Raspberry): needs x11libs, x11extlibs, xf86vidmode, xxf86vm
- x11 (on Mac OS X): needs XQuartz
- cocoa (on Mac OS X): Compiling supported using XCode.
- SDL 1.2 (on Linux/Raspberry): needs sdllib-1.2. SDL2 is experimental
- caca: cacalib
- aa: aalib
- curses: curses-dev
- stdout: termios includes


# Audio Drivers

- OSS (dsp) (on Linux/Raspberry): needs soundcard includes. Usually included on Linux systems.
- alsa (on Linux/Raspberry): needs alsalibs.
- pulse (on Linux/Raspberry): needs pulselibs.
- SDL 1.2 (on Linux/Raspberry): needs sdllib. SDL2 is experimental.
- coreaudio (on Mac OS X): Compiling supported using XCode.


# Audio Output to a File

- libsndfile to output audio to wav files.
- Raw audio is always supported.


# Other Enhancements

- pthreads: pthread includes. Usually included on all Unix systems.
- realtime: sched includes. Usually included on Linux systems.
- autodetect snapshots and tape files by its contents: libssl.



Compiling ZEsarUX
-----------------

Navigate to the `src` directory and type:

    $ ./configure


Optionally you may wish to enable these features:

    $ ./configure --enable-memptr --enable-visualmem --enable-cpustats


NOTE: these options make the emulator use a bit more CPU power.



# Compiling for raspberry-raspbian

I recommend you set these flags:

    $ export CFLAGS=-O2
    $ export LDFLAGS=-O2

    $ ./configure --enable-raspberry

This will ensure that memptr, visualmem, and cpustats are not enabled.

Even more, if you have a slow device like the Raspberry Pi 1 or Zero, I recommend:

    $ ./configure --enable-raspberry --spectrum-reduced-core

This will also ensure that the "reduced core" is on by default, which uses less cpu, although you can also switch it from command line, or at runtime.


NOTE: by using the reduced core the following features will NOT be available, or will NOT be properly emulated:

- Debug t-states
- Char detection
- +3 Disk
- Save to tape
- Divide
- Divmmc
- RZX
- Raster interrupts
- Audio DAC
- Video out to file



# Compiling for macOS

    $ export CFLAGS=-O2
    $ export LDFLAGS=-O2

    $ ./configure         # ... with any options you want

    $ make clean
    $ make


It is possible to run the emulator from the current directory without installing:

    $ ./zesarux



Install and Run ZEsarUX
-----------------------


# Raspberry Pi

The recommended way to start the emulator is with:

    $ ./zesarux --disableborder --zoom 1 --fullscreen --vo fbdev --ao sdl --no-detect-realvideo



# macOS

    $ make macapp

This will create a `macos` folder, which contains the `ZEsarUX.app` along with a compressed `.dmg` file.

You may wish to move this to your "Applications" folder.



# Linux and other Unix systems

If installing from source code:

    $ make
    $ su root
    $ make install


If installing from binary:

    $ su root
    $ ./install.sh



Utilities
---------

These can be compiled with:

    $ make utilities
